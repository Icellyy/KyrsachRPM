using System;
using System.Collections.Generic;
using System.Linq;

namespace AirTransportSystem
{
    class Program
    {
        static List<Flight> flights = new List<Flight>();
        static List<Airplane> airplanes = new List<Airplane>();
        static List<Airport> airports = new List<Airport>();

        static void Main()
        {
            Console.OutputEncoding = System.Text.Encoding.UTF8;
            Console.Title = "✈ Система управления авиаперевозками";
            
            while (true)
            {
                Console.Clear();
                ShowMenu();
                Console.Write("→ Ваш выбор: ");
                string choice = Console.ReadLine();
                Console.Clear();

                switch (choice)
                {
                    case "1": AddFlight(); break;
                    case "2": AddAirplane(); break;
                    case "3": AddAirport(); break;
                    case "4": ShowAllFlights(); break;
                    case "5": EditFlight(); break;
                    case "6": RemoveFlight(); break;
                    case "7": AddPassenger(); break;
                    case "8": return;
                    default: ShowError("Неверный выбор"); break;
                }
            }
        }

        static void ShowMenu()
        {
            WriteCenter("╔════════════════════════════════════════╗");
            WriteCenter("║   СИСТЕМА УПРАВЛЕНИЯ АВИАПЕРЕВОЗКАМИ   ║");
            WriteCenter("╠════════════════════════════════════════╣");
            WriteCenter("║ 1.  Добавить рейс                      ║");
            WriteCenter("║ 2.  Добавить самолет                   ║");
            WriteCenter("║ 3.  Добавить аэропорт                  ║");
            WriteCenter("║ 4.  Показать все рейсы                 ║");
            WriteCenter("║ 5.  Редактировать рейс                 ║");
            WriteCenter("║ 6.  Удалить рейс                       ║");
            WriteCenter("║ 7.  Добавить пассажира                 ║");
            WriteCenter("║ 8.  Выход                              ║");
            WriteCenter("╚════════════════════════════════════════╝");
            Console.WriteLine();
        }

        static void AddFlight()
        {
            WriteCenter("=== ДОБАВЛЕНИЕ РЕЙСА ===");
            Flight flight = new Flight();

            Console.Write("Номер рейса: ");
            flight.FlightNumber = Console.ReadLine();

            Console.WriteLine("Аэропорт отправления:");
            flight.Departure = SelectAirportOrCreate();

            Console.WriteLine("Аэропорт назначения:");
            flight.Destination = SelectAirportOrCreate();

            Console.Write("Время вылета (дд.мм.гггг чч:мм): ");
            if (DateTime.TryParse(Console.ReadLine(), out DateTime depTime))
                flight.DepartureTime = depTime;

            Console.Write("Время прибытия (дд.мм.гггг чч:мм): ");
            if (DateTime.TryParse(Console.ReadLine(), out DateTime arrTime))
                flight.ArrivalTime = arrTime;

            Console.WriteLine("Выберите самолет:");
            flight.Airplane = SelectAirplaneOrCreate();

            flights.Add(flight);
            ShowSuccess("Рейс добавлен!");
        }

        static void AddAirplane()
        {
            WriteCenter("=== ДОБАВЛЕНИЕ САМОЛЕТА ===");
            Airplane airplane = new Airplane();

            Console.Write("Модель: ");
            airplane.Model = Console.ReadLine();

            Console.Write("Регистрационный номер: ");
            airplane.RegistrationNumber = Console.ReadLine();

            Console.Write("Вместимость: ");
            if (int.TryParse(Console.ReadLine(), out int capacity))
                airplane.Capacity = capacity;
            else
                airplane.Capacity = 0;

            airplanes.Add(airplane);
            ShowSuccess("Самолет добавлен!");
        }

        static void AddAirport()
        {
            WriteCenter("=== ДОБАВЛЕНИЕ АЭРОПОРТА ===");
            Airport airport = new Airport();

            Console.Write("Код аэропорта: ");
            airport.Code = Console.ReadLine().ToUpper();

            Console.Write("Название: ");
            airport.Name = Console.ReadLine();

            Console.Write("Город: ");
            airport.City = Console.ReadLine();

            Console.Write("Страна: ");
            airport.Country = Console.ReadLine();

            airports.Add(airport);
            ShowSuccess("Аэропорт добавлен!");
        }

        static void ShowAllFlights()
        {
            WriteCenter("=== СПИСОК РЕЙСОВ ===");
            if (!flights.Any())
            {
                WriteCenter("Рейсов нет");
            }
            else
            {
                foreach (var flight in flights)
                {
                    flight.Print();
                    Console.WriteLine(new string('-', 40));
                }
            }
            Console.WriteLine("\nНажмите Enter...");
            Console.ReadLine();
        }

        static void EditFlight()
        {
            ShowAllFlights();
            Console.Write("Введите номер рейса: ");
            string flightNumber = Console.ReadLine();

            var flight = flights.FirstOrDefault(f => f.FlightNumber == flightNumber);
            if (flight == null)
            {
                ShowError("Рейс не найден");
                return;
            }

            Console.WriteLine("1. Изменить номер рейса");
            Console.WriteLine("2. Изменить аэропорт отправления");
            Console.WriteLine("3. Изменить аэропорт назначения");
            Console.WriteLine("4. Изменить время вылета");
            Console.WriteLine("5. Изменить время прибытия");
            Console.WriteLine("6. Изменить самолет");

            switch (Console.ReadLine())
            {
                case "1":
                    Console.Write("Новый номер: ");
                    flight.FlightNumber = Console.ReadLine();
                    break;
                case "2":
                    flight.Departure = SelectAirportOrCreate();
                    break;
                case "3":
                    flight.Destination = SelectAirportOrCreate();
                    break;
                case "4":
                    Console.Write("Новое время: ");
                    if (DateTime.TryParse(Console.ReadLine(), out DateTime newDepTime))
                        flight.DepartureTime = newDepTime;
                    break;
                case "5":
                    Console.Write("Новое время: ");
                    if (DateTime.TryParse(Console.ReadLine(), out DateTime newArrTime))
                        flight.ArrivalTime = newArrTime;
                    break;
                case "6":
                    flight.Airplane = SelectAirplaneOrCreate();
                    break;
            }
            ShowSuccess("Рейс обновлен!");
        }

        static void RemoveFlight()
        {
            ShowAllFlights();
            Console.Write("Введите номер рейса: ");
            string flightNumber = Console.ReadLine();

            var flight = flights.FirstOrDefault(f => f.FlightNumber == flightNumber);
            if (flight != null)
            {
                flights.Remove(flight);
                ShowSuccess("Рейс удален!");
            }
            else
            {
                ShowError("Рейс не найден");
            }
        }

        static void AddPassenger()
        {
            ShowAllFlights();
            Console.Write("Введите номер рейса: ");
            string flightNumber = Console.ReadLine();

            var flight = flights.FirstOrDefault(f => f.FlightNumber == flightNumber);
            if (flight == null)
            {
                ShowError("Рейс не найден");
                return;
            }

            if (flight.Passengers.Count >= flight.Airplane.Capacity)
            {
                ShowError("Рейс полностью забронирован");
                return;
            }

            Passenger passenger = new Passenger();
            Console.Write("ФИО: ");
            passenger.FullName = Console.ReadLine();
            Console.Write("Номер паспорта: ");
            passenger.PassportNumber = Console.ReadLine();
            Console.Write("Контакты: ");
            passenger.ContactInfo = Console.ReadLine();

            flight.Passengers.Add(passenger);
            ShowSuccess("Пассажир добавлен!");
        }

        static Airport SelectAirportOrCreate()
        {
            while (true)
            {
                Console.WriteLine("Выберите аэропорт:");
                for (int i = 0; i < airports.Count; i++)
                {
                    Console.WriteLine($"{i + 1}. {airports[i].Name} ({airports[i].Code})");
                }
                Console.WriteLine("0. Создать новый");

                if (int.TryParse(Console.ReadLine(), out int choice))
                {
                    if (choice == 0)
                    {
                        AddAirport();
                        return airports.Last();
                    }
                    if (choice > 0 && choice <= airports.Count)
                    {
                        return airports[choice - 1];
                    }
                }
                ShowError("Неверный выбор");
            }
        }

        static Airplane SelectAirplaneOrCreate()
        {
            while (true)
            {
                Console.WriteLine("Выберите самолет:");
                for (int i = 0; i < airplanes.Count; i++)
                {
                    Console.WriteLine($"{i + 1}. {airplanes[i].Model} ({airplanes[i].RegistrationNumber})");
                }
                Console.WriteLine("0. Создать новый");

                if (int.TryParse(Console.ReadLine(), out int choice))
                {
                    if (choice == 0)
                    {
                        AddAirplane();
                        return airplanes.Last();
                    }
                    if (choice > 0 && choice <= airplanes.Count)
                    {
                        return airplanes[choice - 1];
                    }
                }
                ShowError("Неверный выбор");
            }
        }

        static void WriteCenter(string text)
        {
            int leftPadding = (Console.WindowWidth - text.Length) / 2;
            Console.WriteLine(new string(' ', leftPadding) + text);
        }

        static void ShowSuccess(string message)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            WriteCenter($"✓ {message}");
            Console.ResetColor();
            Console.WriteLine("\nНажмите Enter...");
            Console.ReadLine();
        }

        static void ShowError(string message)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            WriteCenter($"⚠ {message}");
            Console.ResetColor();
            Console.WriteLine("\nНажмите Enter...");
            Console.ReadLine();
        }
    }
}
